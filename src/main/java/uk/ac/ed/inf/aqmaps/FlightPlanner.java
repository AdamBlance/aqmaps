package uk.ac.ed.inf.aqmaps;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.lang.Math;

import com.mapbox.geojson.Feature;
import com.mapbox.geojson.FeatureCollection;
import com.mapbox.geojson.Point;
import com.mapbox.geojson.Polygon;

import static uk.ac.ed.inf.aqmaps.PointUtils.distanceBetween;

public class FlightPlanner {

	// recording the path should be the responsibility of the drone
	
	// This should take in the start point, sensor points and try to devise a good path
	
	private NoFlyZoneChecker noFlyZoneChecker;
	private List<Sensor> sensors;	
	
	public FlightPlanner(List<Sensor> sensors, NoFlyZoneChecker noFlyZoneChecker) {
		this.noFlyZoneChecker = noFlyZoneChecker;
		this.sensors = sensors;
	}
	
	
	// Returns a high-level flight path generated by the greedy algorithm
	// TODO: Tidy the find minimum bit and use streams instead
	public List<Sensor> greedyPath(Point start) {		
		var dronePath = new ArrayList<Sensor>();
		var unvisited = new ArrayList<Sensor>(sensors);
		var currentPoint = start;
		
		for (int i = 0; i < sensors.size(); i++) {
			var closest = closestSensor(currentPoint, unvisited);
			currentPoint = closest.getPoint();
			dronePath.add(closest);
			unvisited.remove(closest);
		}		
		return dronePath;
	}
	
	private static Sensor closestSensor(Point point, List<Sensor> sensors) {
		return sensors.stream()
				.min((Sensor a, Sensor b) -> Double.compare(distanceBetween(point, a.getPoint()), distanceBetween(point, b.getPoint())))
				.get();
		
		
//		var closestSensor = unvisited.stream()
//		.map(s -> new AbstractMap.SimpleEntry<Sensor, Double>(s, distanceBetween(currentPoint, s.getPoint())))
//		.min(Comparator.comparing(AbstractMap.SimpleEntry::getValue))
//		.get().getKey();
		
	}
		
//		var curr = start;
//		double minDistance;
//		Point minSensor;
//		
//		
//		
//		// For every single sensor
//		for (int i = 0; i < 33; i++) {
//		
//			minDistance = Double.MAX_VALUE;
//			minSensor = Point.fromLngLat(0, 0);
//			
//			for (var sensor : sensors) {
//				var dist = distanceBetween(curr, sensor.getPoint());
//				if (dist < minDistance) {
//					if (!dronePath.contains(sensor)) {
//						minDistance = dist;
//						minSensor = sensor;
//					}
//				}
//			}
//			if (minSensor.latitude() != 0)	{
//				curr = minSensor;
//				dronePath.add(curr);  // Path acts as the visited thing
//			} else {
//				System.out.println("Stuck!");
//				break;
//			}
//		}
//		dronePath.add(start);
//		return dronePath;
	
	
	// TODO: Implement this to optimise the path if you have time
	// Note that the start pos appears twice in the path, might break 2-opt
	public List<Point> twoOpt(List<Point> path){
		return new ArrayList<Point>();
	}
	
}
